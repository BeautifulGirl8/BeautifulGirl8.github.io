---
layout: post
title:      "CLI Ruby gem Portfolio Project "
date:       2021-03-26 14:51:29 +0000
permalink:  cli_ruby_gem_portfolio_project
---


It was a truly rewarding journey to  create a CLI (Command Line Interface) gem from scratch. What I had to do for my Gem project was scrape a website, turn that data into objects, and use those objects to present the user with a list of data to explore. To the user, the experience looks like this: start program, get a list of the info, choose one and get back a list of all its information. Tutorials from our wonderful instructors paved the way for me to independently create a program that stands alone in the world.  I set out to create a tool using CLI for users to run tasks on a computer. Using CLI, my program would scrape information from an external source, say a website, then, receiving user prompts, manupulate and display select information in the interface in response.  The first part of this project was checking whether some of the ideas I had for a gem would be viable, passing it though the first test. The first test was whether the source website would be 'scrappable.' Using Nokogiri technology, I was supposed to 'scrape' a website to provide the backbone of my CLI. Some websites did not render themselves too well for that process for the reason of not being so scrappable. I was told I should spend some time to take a look and find scrappable sites. I did just that, but in the course of this project, I'd have to start over at least once, because of the stubborn "unscrapability" of different sites. But the first bit of the task was then done. Using a simple command of $bundle gem$, then,  I was able to jumpstart the process of creating a gem. It generated a directory named GEM_NAME with a Rakefile, GEM_NAME.gemspec, and other supporting files and directories that can be used to develop a rubygem with that name. The skeleton for my gem was thus born instantly. The programming itself was also very interesting. Using object oriented programming, the website's data would be turned into objects that were manipulated into displayed data on interface. The flow was created so that user's choice of category would guide which data would be shown. All in all, my end result was something I was proud of, and thought even visually stunning. Thanks to the new 'coloring' gems I installed in my program, my interface boasted rainbow color scheme. As a user, I'd imagined I'd enjoy a visual interface greeting me, showing me today's date and asking which -either art, sports or film- historical event that happened today's long time ago they would like to see. And they could see one, all, be reminded to enter a valid entry, or exit the interface, all very seamlessly. This was a major learning experience for me, one that I very much enjoyed--and I look forward to more soon.
